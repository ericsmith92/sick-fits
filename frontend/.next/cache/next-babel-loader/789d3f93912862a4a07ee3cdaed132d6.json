{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nexport default function useForm(initial = {}) {\n  //create a state object for our inputs\n  const {\n    0: inputs,\n    1: setInputs\n  } = useState(initial); //handle change here, pass to input\n\n  function handleChange(e) {\n    //lets descructure some properties of our input we care about from e.target\n    let {\n      value,\n      name,\n      type\n    } = e.target;\n\n    if (type === 'number') {\n      value = parseInt(value);\n    }\n\n    if (type === 'file') {\n      value[0] = e.targer.files;\n    }\n\n    setInputs(_objectSpread(_objectSpread({}, inputs), {}, {\n      [name]: value\n    }));\n  }\n\n  function resetForm() {\n    setInputs(initial);\n  }\n\n  function clearForm() {\n    const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n  } //return the things we want to surface from this custom hook\n\n\n  return {\n    inputs,\n    handleChange,\n    resetForm\n  };\n}","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/lib/useForm.js"],"names":["useState","useForm","initial","inputs","setInputs","handleChange","e","value","name","type","target","parseInt","targer","files","resetForm","clearForm","blankState","Object","fromEntries","entries","map","key"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,OAAT,CAAiBC,OAAO,GAAG,EAA3B,EAA8B;AACzC;AACA,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBJ,QAAQ,CAACE,OAAD,CAApC,CAFyC,CAIzC;;AACA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AACrB;AACA,QAAI;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAAwBH,CAAC,CAACI,MAA9B;;AAEA,QAAGD,IAAI,KAAK,QAAZ,EAAqB;AACjBF,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAD,CAAhB;AACH;;AAED,QAAGE,IAAI,KAAK,MAAZ,EAAmB;AACfF,MAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,CAAC,CAACM,MAAF,CAASC,KAApB;AACH;;AAEDT,IAAAA,SAAS,iCACFD,MADE;AAEL,OAACK,IAAD,GAASD;AAFJ,OAAT;AAIH;;AAED,WAASO,SAAT,GAAoB;AAChBV,IAAAA,SAAS,CAACF,OAAD,CAAT;AACH;;AAED,WAASa,SAAT,GAAoB;AAChB,UAAMC,UAAU,GAAGC,MAAM,CAACC,WAAP,CAAmBD,MAAM,CAACE,OAAP,CAAehB,MAAf,EAAuBiB,GAAvB,CAA2B,CAAC,CAACC,GAAD,EAAMd,KAAN,CAAD,KAAkB,CAACc,GAAD,EAAM,EAAN,CAA7C,CAAnB,CAAnB;AACH,GA7BwC,CA+BzC;;;AACA,SAAO;AACHlB,IAAAA,MADG;AAEHE,IAAAA,YAFG;AAGHS,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import { useState } from 'react';\n\nexport default function useForm(initial = {}){\n    //create a state object for our inputs\n    const [inputs, setInputs] = useState(initial);\n\n    //handle change here, pass to input\n    function handleChange(e) {\n        //lets descructure some properties of our input we care about from e.target\n        let { value, name, type } = e.target;\n        \n        if(type === 'number'){\n            value = parseInt(value);\n        }\n\n        if(type === 'file'){\n            value[0] = e.targer.files;\n        }\n\n        setInputs({ \n            ...inputs,\n            [name] : value\n        });\n    }\n\n    function resetForm(){\n        setInputs(initial);\n    }\n\n    function clearForm(){\n        const blankState = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n    }\n\n    //return the things we want to surface from this custom hook\n    return {\n        inputs,\n        handleChange,\n        resetForm\n    };\n}\n"]},"metadata":{},"sourceType":"module"}