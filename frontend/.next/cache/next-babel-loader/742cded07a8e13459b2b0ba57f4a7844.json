{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_PRODUCT_QUERY($id: ID!){\\n        Product(where: {\\n            id: $id\\n        }){\\n            id\\n            name\\n            price\\n            description\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nexport default function updateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //1. we need to get the existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data, loading, error); //2. we need to get the mutation to update the product\n  //3. we need the form to handle(post) the updates\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Let's update this silly cunt: \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(updateProduct, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","SINGLE_PRODUCT_QUERY","updateProduct","id","variables","data","loading","error","console","log"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,IAAMC,oBAAoB,GAAGF,GAAH,mBAA1B;AAYA,eAAe,SAASG,aAAT,OAA8B;AAAA;;AAAA,MAALC,EAAK,QAALA,EAAK;;AACzC;AADyC,kBAERH,QAAQ,CAACC,oBAAD,EAAuB;AAAEG,IAAAA,SAAS,EAAE;AAACD,MAAAA,EAAE,EAAFA;AAAD;AAAb,GAAvB,CAFA;AAAA,MAEjCE,IAFiC,aAEjCA,IAFiC;AAAA,MAE3BC,OAF2B,aAE3BA,OAF2B;AAAA,MAElBC,KAFkB,aAElBA,KAFkB;;AAGzCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,OAAlB,EAA2BC,KAA3B,EAHyC,CAIzC;AACA;;AACA,sBACI;AAAA,iDAAkCJ,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GATuBD,a;UAEaF,Q","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n    console.log(data, loading, error);\n    //2. we need to get the mutation to update the product\n    //3. we need the form to handle(post) the updates\n    return(\n        <p>Let's update this silly cunt: {id}</p>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}