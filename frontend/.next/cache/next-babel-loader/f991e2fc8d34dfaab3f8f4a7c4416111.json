{"ast":null,"code":"import _slicedToArray from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        #vars passed in here\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ){\\n        updateProduct(\\n            #we need id AND data here since we are updating\\n            id: $id,\\n            data: {\\n                id: $id\\n                name: $name\\n                description: $description\\n                price: $price\\n            }){\\n                #get some shit back after updating\\n                id\\n                price\\n                description\\t\\n                name\\n            }\\n        }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_PRODUCT_QUERY($id: ID!){\\n        Product(where: {\\n            id: $id\\n        }){\\n            id\\n            name\\n            price\\n            description\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function updateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //1. we need to get the existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data, loading, error); //2. we need to get the mutation to update the product\n  //remember, updateProduct is our setter function\n  //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      errorLoading = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //3. we need the form to handle(post) the updates\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Let's update this silly cunt: \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(updateProduct, \"D0enOQRv/mpIRo0jbpo6QICD1Pk=\", false, function () {\n  return [useQuery, useMutation];\n});","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","useMutation","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","updateProduct","id","variables","data","loading","error","console","log","updateData","errorLoading","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,gBAAtC;AAEA,IAAMC,oBAAoB,GAAGH,GAAH,mBAA1B;AAaA,IAAMI,uBAAuB,GAAGJ,GAAH,oBAA7B;AA0BA,eAAe,SAASK,aAAT,OAA8B;AAAA;;AAAA,MAALC,EAAK,QAALA,EAAK;;AACzC;AADyC,kBAERL,QAAQ,CAACE,oBAAD,EAAuB;AAAEI,IAAAA,SAAS,EAAE;AAACD,MAAAA,EAAE,EAAFA;AAAD;AAAb,GAAvB,CAFA;AAAA,MAEjCE,IAFiC,aAEjCA,IAFiC;AAAA,MAE3BC,OAF2B,aAE3BA,OAF2B;AAAA,MAElBC,KAFkB,aAElBA,KAFkB;;AAGzCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkBC,OAAlB,EAA2BC,KAA3B,EAHyC,CAIzC;AACA;AACA;;AANyC,qBAOkDR,WAAW,CAACE,uBAAD,EAA0B;AAAEG,IAAAA,SAAS,EAAE;AAACD,MAAAA,EAAE,EAAFA;AAAD;AAAb,GAA1B,CAP7D;AAAA;AAAA,MAOlCD,aAPkC;AAAA;AAAA,MAOXQ,UAPW,kBAOjBL,IAPiB;AAAA,MAOQM,YAPR,kBAOCJ,KAPD;AAAA,MAO+BK,aAP/B,kBAOsBN,OAPtB,EAQzC;;;AACA,sBACI;AAAA,iDAAkCH,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GAZuBD,a;UAEaJ,Q,EAK0DC,W","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ){\n        updateProduct(\n            #we need id AND data here since we are updating\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\n\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n    console.log(data, loading, error);\n    //2. we need to get the mutation to update the product\n    //remember, updateProduct is our setter function\n    //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n    const [updateProduct, { data: updateData, error: errorLoading, loading: updateLoading }] = useMutation(UPDATE_PRODUCT_MUTATION, { variables: {id}});\n    //3. we need the form to handle(post) the updates\n    return(\n        <p>Let's update this silly cunt: {id}</p>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}