{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\";\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n        $image: Upload\n    ){\n        updateProduct(\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n                status: \"AVAILABLE\"\n                photo: {\n                    create: {\n                        image: $image,\n                        altText: $name\n                    }\n                }\n\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\nexport default function updateProduct({\n  id\n}) {\n  //1. we need to get the existing product\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data, loading, error); //2. we need to get the mutation to update the product\n  //3. we need the form to handle(post) the updates\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Let's update this silly cunt: \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","updateProduct","id","data","loading","error","variables","console","log"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,MAAMC,oBAAoB,GAAGF,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,MAAMG,uBAAuB,GAAGH,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAhCA;AAkCA,eAAe,SAASI,aAAT,CAAuB;AAAEC,EAAAA;AAAF,CAAvB,EAA8B;AACzC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACC,oBAAD,EAAuB;AAAEO,IAAAA,SAAS,EAAE;AAACJ,MAAAA;AAAD;AAAb,GAAvB,CAAzC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAAkBC,OAAlB,EAA2BC,KAA3B,EAHyC,CAIzC;AAEA;;AACA,sBACI;AAAA,iDAAkCH,EAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n        $image: Upload\n    ){\n        updateProduct(\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n                status: \"AVAILABLE\"\n                photo: {\n                    create: {\n                        image: $image,\n                        altText: $name\n                    }\n                }\n\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\n\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n    console.log(data, loading, error);\n    //2. we need to get the mutation to update the product\n\n    //3. we need the form to handle(post) the updates\n    return(\n        <p>Let's update this silly cunt: {id}</p>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}