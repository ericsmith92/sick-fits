{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        #vars passed in here\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ){\\n        updateProduct(\\n            #we need id AND data here since we are updating\\n            id: $id,\\n            data: {\\n                name: $name\\n                description: $description\\n                price: $price\\n            }){\\n                #get some shit back after updating\\n                id\\n                price\\n                description\\t\\n                name\\n            }\\n        }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_PRODUCT_QUERY($id: ID!){\\n        Product(where: {\\n            id: $id\\n        }){\\n            id\\n            name\\n            price\\n            description\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function updateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //1. we need to get the existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error; //remember, if we are loading none of the shit below will work, so just return loading p tag\n  //if we are in that state\n  //2. we need to get the mutation to update the product\n  //remember, updateProduct is our setter function\n  //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      errorLoading = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //3. we need the form to handle(post) the updates\n\n\n  var _useForm = useForm(data === null || data === void 0 ? void 0 : data.Product),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 24\n  }, this); //nothing passed here will execute\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                console.log(inputs); //the data we are sending\n                //our function we got from useMutation() hook, we passed our query and vars above\n\n                _context.next = 4;\n                return updateProduct({\n                  variables: {\n                    id: id,\n                    data: {\n                      name: inputs.name,\n                      price: inputs.price,\n                      description: inputs.description\n                    }\n                  },\n                  refetchQueries: [{\n                    query: ALL_PRODUCTS_QUERY\n                  }]\n                })[\"catch\"](console.error);\n\n              case 4:\n                res = _context.sent;\n                console.log(res); //clearForm();\n                //go to that products page\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: updateLoading,\n      \"aria-busy\": updateLoading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"+ Update Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(updateProduct, \"diW52xT9lLKi77XnVGuoV+qXWQE=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","useMutation","useForm","Form","ALL_PRODUCTS_QUERY","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","updateProduct","id","variables","data","loading","error","updateData","errorLoading","updateLoading","Product","inputs","handleChange","clearForm","resetForm","e","preventDefault","console","log","name","price","description","refetchQueries","query","res"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ){\n        updateProduct(\n            #we need id AND data here since we are updating\n            id: $id,\n            data: {\n                name: $name\n                description: $description\n                price: $price\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\n\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n\n    //remember, if we are loading none of the shit below will work, so just return loading p tag\n    //if we are in that state\n\n\n    //2. we need to get the mutation to update the product\n    //remember, updateProduct is our setter function\n    //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n    const [updateProduct, { data: updateData, error: errorLoading, loading: updateLoading }] = useMutation(UPDATE_PRODUCT_MUTATION);\n    //3. we need the form to handle(post) the updates\n    const{ inputs, handleChange, clearForm, resetForm } = useForm(data?.Product);\n\n    if(loading) return <p>Loading...</p> //nothing passed here will execute\n\n    return(\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n            console.log(inputs);\n            //the data we are sending\n            //our function we got from useMutation() hook, we passed our query and vars above\n            const res = await updateProduct({\n                variables: {\n                    id,\n                    data: {\n                       name: inputs.name,\n                       price: inputs.price,\n                       description: inputs.description \n                    }\n                },\n                refetchQueries: [{ query: ALL_PRODUCTS_QUERY }]\n            }).catch(console.error);\n            console.log(res);\n            //clearForm();\n            //go to that products page\n        }}>\n            <fieldset disabled={updateLoading} aria-busy={updateLoading}>\n                <label htmlFor='name'>\n                    Name\n                    <input \n                        type='text' \n                        name='name' \n                        id='name' \n                        placeholder='Name' \n                        value={inputs.name} \n                        onChange={handleChange}\n                    /> \n                </label>\n                <label htmlFor='price'>\n                    Price\n                    <input \n                        type='number'\n                        id='price'\n                        name='price'\n                        placeholder='price'\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor='description'>\n                    Description\n                    <textarea\n                        id='description'\n                        name='description'\n                        placeholder='Description'\n                        value={inputs.description}\n                        onChange={handleChange}\n                    ></textarea>\n                </label>\n                <button type='submit'>+ Update Product</button>\n            </fieldset>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}