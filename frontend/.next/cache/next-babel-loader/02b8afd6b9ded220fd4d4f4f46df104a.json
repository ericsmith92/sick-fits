{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\";\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ){\n        updateProduct(\n            #we need id AND data here since we are updating\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\nexport default function updateProduct({\n  id\n}) {\n  //1. we need to get the existing product\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id\n    }\n  });\n  console.log(data, loading, error); //2. we need to get the mutation to update the product\n  //remember, updateProduct is our setter function\n  //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n\n  const [updateProduct, {\n    data: updateData,\n    error: errorLoading,\n    loading: updateLoading\n  }] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id //TODO: pass in updates to product here\n\n    }\n  }); //3. we need the form to handle(post) the updates\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: async e => {\n      e.preventDefault(); //the data we are sending\n      //our function we got from useMutation() hook, we passed our query and vars above\n\n      const res = await updateProduct();\n      console.log(res);\n      clearForm(); //go to that products page\n    },\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          id: \"image\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"+ Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","useMutation","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","updateProduct","id","data","loading","error","variables","console","log","updateData","errorLoading","updateLoading","e","preventDefault","res","clearForm","handleChange","inputs","name","price","description"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ){\n        updateProduct(\n            #we need id AND data here since we are updating\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\n\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n    console.log(data, loading, error);\n    //2. we need to get the mutation to update the product\n    //remember, updateProduct is our setter function\n    //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n    const [updateProduct, { data: updateData, error: errorLoading, loading: updateLoading }] = useMutation(UPDATE_PRODUCT_MUTATION, \n        { variables: {\n            id,\n            //TODO: pass in updates to product here\n        },\n    });\n    //3. we need the form to handle(post) the updates\n    return(\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n            //the data we are sending\n            //our function we got from useMutation() hook, we passed our query and vars above\n            const res = await updateProduct();\n            console.log(res);\n            clearForm();\n            //go to that products page\n        }}>\n            <fieldset disabled={loading} aria-busy={loading}>\n                <label htmlFor='image'>\n                    <input \n                        type='file' \n                        name='image' \n                        id='image' \n                        onChange={handleChange}\n                        required\n                    /> \n                </label>\n                <label htmlFor='name'>\n                    Name\n                    <input \n                        type='text' \n                        name='name' \n                        id='name' \n                        placeholder='Name' \n                        value={inputs.name} \n                        onChange={handleChange}\n                    /> \n                </label>\n                <label htmlFor='price'>\n                    Price\n                    <input \n                        type='number'\n                        id='price'\n                        name='price'\n                        placeholder='price'\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor='description'>\n                    Description\n                    <textarea\n                        id='description'\n                        name='description'\n                        placeholder='Description'\n                        value={inputs.description}\n                        onChange={handleChange}\n                    ></textarea>\n                </label>\n                <button type='submit'>+ Add Product</button>\n            </fieldset>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}