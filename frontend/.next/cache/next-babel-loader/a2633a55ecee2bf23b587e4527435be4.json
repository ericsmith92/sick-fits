{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation UPDATE_PRODUCT_MUTATION(\\n        #vars passed in here\\n        $id: ID!\\n        $name: String\\n        $description: String\\n        $price: Int\\n    ){\\n        updateProduct(\\n            #we need id AND data here since we are updating\\n            id: $id,\\n            data: {\\n                id: $id\\n                name: $name\\n                description: $description\\n                price: $price\\n            }){\\n                #get some shit back after updating\\n                id\\n                price\\n                description\\t\\n                name\\n            }\\n        }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query SINGLE_PRODUCT_QUERY($id: ID!){\\n        Product(where: {\\n            id: $id\\n        }){\\n            id\\n            name\\n            price\\n            description\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\nvar SINGLE_PRODUCT_QUERY = gql(_templateObject());\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject2());\nexport default function updateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  //1. we need to get the existing product\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data, loading, error); //2. we need to get the mutation to update the product\n  //remember, updateProduct is our setter function\n  //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id //TODO: pass in updates to product here\n\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      errorLoading = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading; //3. we need the form to handle(post) the updates\n\n\n  var _useForm = useForm({\n    name: data.name,\n    price: data.price,\n    description: data.description\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault(); //the data we are sending\n                //our function we got from useMutation() hook, we passed our query and vars above\n\n                _context.next = 3;\n                return updateProduct();\n\n              case 3:\n                res = _context.sent;\n                console.log(res);\n                clearForm(); //go to that products page\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          id: \"image\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"+ Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(updateProduct, \"diW52xT9lLKi77XnVGuoV+qXWQE=\", false, function () {\n  return [useQuery, useMutation, useForm];\n});","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/UpdateProduct.js"],"names":["gql","useQuery","useMutation","useForm","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","updateProduct","id","variables","data","loading","error","console","log","updateData","errorLoading","updateLoading","name","price","description","inputs","handleChange","clearForm","resetForm","e","preventDefault","res"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { useQuery, useMutation } from '@apollo/client';\nimport useForm from '../lib/useForm';\n\nconst SINGLE_PRODUCT_QUERY = gql`\n    query SINGLE_PRODUCT_QUERY($id: ID!){\n        Product(where: {\n            id: $id\n        }){\n            id\n            name\n            price\n            description\n        }\n    }\n`;\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n    mutation UPDATE_PRODUCT_MUTATION(\n        #vars passed in here\n        $id: ID!\n        $name: String\n        $description: String\n        $price: Int\n    ){\n        updateProduct(\n            #we need id AND data here since we are updating\n            id: $id,\n            data: {\n                id: $id\n                name: $name\n                description: $description\n                price: $price\n            }){\n                #get some shit back after updating\n                id\n                price\n                description\t\n                name\n            }\n        }\n    `;\n\nexport default function updateProduct({ id }){\n    //1. we need to get the existing product\n    const { data, loading, error } = useQuery(SINGLE_PRODUCT_QUERY, { variables: {id}});\n    console.log(data, loading, error);\n    //2. we need to get the mutation to update the product\n    //remember, updateProduct is our setter function\n    //we also rename our destructured values WHILE destructuring to avoid naming conflicts since we are using 2 hooks\n    const [updateProduct, { data: updateData, error: errorLoading, loading: updateLoading }] = useMutation(UPDATE_PRODUCT_MUTATION, \n        { variables: {\n            id,\n            //TODO: pass in updates to product here\n        },\n    });\n    //3. we need the form to handle(post) the updates\n    const{ inputs, handleChange, clearForm, resetForm } = useForm({\n        name: data.name,\n        price: data.price,\n        description: data.description,\n    });\n\n    return(\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n            //the data we are sending\n            //our function we got from useMutation() hook, we passed our query and vars above\n            const res = await updateProduct();\n            console.log(res);\n            clearForm();\n            //go to that products page\n        }}>\n            <fieldset disabled={loading} aria-busy={loading}>\n                <label htmlFor='image'>\n                    <input \n                        type='file' \n                        name='image' \n                        id='image' \n                        onChange={handleChange}\n                        required\n                    /> \n                </label>\n                <label htmlFor='name'>\n                    Name\n                    <input \n                        type='text' \n                        name='name' \n                        id='name' \n                        placeholder='Name' \n                        value={inputs.name} \n                        onChange={handleChange}\n                    /> \n                </label>\n                <label htmlFor='price'>\n                    Price\n                    <input \n                        type='number'\n                        id='price'\n                        name='price'\n                        placeholder='price'\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor='description'>\n                    Description\n                    <textarea\n                        id='description'\n                        name='description'\n                        placeholder='Description'\n                        value={inputs.description}\n                        onChange={handleChange}\n                    ></textarea>\n                </label>\n                <button type='submit'>+ Add Product</button>\n            </fieldset>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}