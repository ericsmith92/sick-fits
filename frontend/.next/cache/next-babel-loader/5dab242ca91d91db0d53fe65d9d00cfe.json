{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/CreateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation CREATE_PRODUCT_MUTATION(\\n        #which variables are getting passed in?\\n        #what types are they?\\n        $name: String!\\n        $description: String!\\n        $price: Int!\\n        $image: Upload\\n\\n    ){\\n        createProduct(data:{\\n            name: $name\\n            description: $description\\n            price: $price\\n            status: \\\"AVAILABLE\\\"\\n            photo: {\\n                create: {\\n                    image: $image,\\n                    altText: $name\\n                }\\n            }\\n        }){\\n            id\\n            price\\n            description\\t\\n            name\\n        }\\n    }\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\nvar CREATE_PRODUCT_MUTATION = gql(_templateObject());\nexport default function CreateProduct() {\n  _s();\n\n  var _useForm = useForm({\n    image: '',\n    name: 'Tingz',\n    price: 342567,\n    description: 'Tingz be poppin off'\n  }),\n      inputs = _useForm.inputs,\n      handleChange = _useForm.handleChange,\n      clearForm = _useForm.clearForm,\n      resetForm = _useForm.resetForm;\n\n  var _useMutation = useMutation(CREATE_PRODUCT_MUTATION, {\n    variables: inputs,\n    refetchQueries: [{\n      query: ALL_PRODUCTS_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error,\n      data = _useMutation2$.data;\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault(); //the data we are sending\n                //our function we got from useMutation() hook, we passed our query and vars above\n\n                _context.next = 3;\n                return createProduct();\n\n              case 3:\n                res = _context.sent;\n                clearForm();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"image\",\n          id: \"image\",\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"name\",\n          id: \"name\",\n          placeholder: \"Name\",\n          value: inputs.name,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"price\",\n        children: [\"Price\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"price\",\n          name: \"price\",\n          placeholder: \"price\",\n          value: inputs.price,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\",\n        children: [\"Description\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          name: \"description\",\n          placeholder: \"Description\",\n          value: inputs.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"+ Add Product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateProduct, \"yqjHIGP2ay9VbBNRjXKap+hjdzo=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = CreateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateProduct\");","map":{"version":3,"sources":["/Users/ericsmith/Documents/courses/Advanced-React/sick-fits/frontend/components/CreateProduct.js"],"names":["useMutation","gql","useForm","Form","ALL_PRODUCTS_QUERY","CREATE_PRODUCT_MUTATION","CreateProduct","image","name","price","description","inputs","handleChange","clearForm","resetForm","variables","refetchQueries","query","createProduct","loading","error","data","e","preventDefault","res"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport useForm from '../lib/useForm';\nimport Form from './styles/Form';\nimport { ALL_PRODUCTS_QUERY } from './Products';\n\nconst CREATE_PRODUCT_MUTATION = gql`\n    mutation CREATE_PRODUCT_MUTATION(\n        #which variables are getting passed in?\n        #what types are they?\n        $name: String!\n        $description: String!\n        $price: Int!\n        $image: Upload\n\n    ){\n        createProduct(data:{\n            name: $name\n            description: $description\n            price: $price\n            status: \"AVAILABLE\"\n            photo: {\n                create: {\n                    image: $image,\n                    altText: $name\n                }\n            }\n        }){\n            id\n            price\n            description\t\n            name\n        }\n    }`;\n\nexport default function CreateProduct(){\n    \n    const{ inputs, handleChange, clearForm, resetForm } = useForm({\n        image: '',\n        name: 'Tingz',\n        price: 342567,\n        description: 'Tingz be poppin off',\n    });\n\n    const [ createProduct, { loading, error, data } ] = useMutation(CREATE_PRODUCT_MUTATION, {\n        variables: inputs,\n        refetchQueries: [{ query: ALL_PRODUCTS_QUERY }]\n    });\n\n    return(\n        <Form onSubmit={async (e) => {\n            e.preventDefault();\n            //the data we are sending\n            //our function we got from useMutation() hook, we passed our query and vars above\n            const res = await createProduct();\n            clearForm();\n        }}>\n            <fieldset disabled={loading} aria-busy={loading}>\n                <label htmlFor='image'>\n                    <input \n                        type='file' \n                        name='image' \n                        id='image' \n                        onChange={handleChange}\n                        required\n                    /> \n                </label>\n                <label htmlFor='name'>\n                    Name\n                    <input \n                        type='text' \n                        name='name' \n                        id='name' \n                        placeholder='Name' \n                        value={inputs.name} \n                        onChange={handleChange}\n                    /> \n                </label>\n                <label htmlFor='price'>\n                    Price\n                    <input \n                        type='number'\n                        id='price'\n                        name='price'\n                        placeholder='price'\n                        value={inputs.price}\n                        onChange={handleChange}\n                    />\n                </label>\n                <label htmlFor='description'>\n                    Description\n                    <textarea\n                        id='description'\n                        name='description'\n                        placeholder='Description'\n                        value={inputs.description}\n                        onChange={handleChange}\n                    ></textarea>\n                </label>\n                <button type='submit'>+ Add Product</button>\n            </fieldset>\n        </Form>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}